version: '3.9'
# This file configure containers and their interactions
# https://docs.docker.com/compose/compose-file


# This element defines volumes used in project
# volumes - is mapping between container and host file system
# https://habr.com/ru/company/southbridge/blog/534334/
volumes:
  prometheus:
  alertmanager:

# Networks - virtual networks used to communicate between containers
networks:
  iomt:  # name
    driver: overlay  # network driver, overlay - special driver for swarm orcherstration
    #external: true  # means that this network is already created and compose doesn't need to create it
    attachable: true
  monitoring:
    driver: overlay
    #external: true
    attachable: true

# Configs - is flexible way to configurate your container in **SWARM**
# https://docs.docker.com/engine/swarm/configs/
configs:
  prom_config:
    file: ./prometheus/prometheus.yml
  alert_rules:
    file: ./prometheus/alerts.yml
  alertmanager:
    file: ./alertmanager/alertmanager.yml

# Services - main element in compose file enumerating all existing services
services:
  lb:  # Name (loadbalancer)
    depends_on:  # Guarantee to start service after encountered below
      - iomt_01
    image: 127.0.0.1:5000/haproxy
    # image: 127.0.0.1:5000/iomt-service/haproxy  # image specifies the image to start the container from
                                                # 127.0.0.1:5000 - registry
                                                # iomt-service - project
                                                # haproxy - image
    build:  # build specifies the build configuration for creating container image from source
      # https://docs.docker.com/compose/compose-file/build/
      context: ./haproxy  # context defines either a path to a directory containing a Dockerfile
    environment:  # environment defines environment variables set in the container
      - BALANCE=leastconn
    volumes:  # same as top-level volumes, BUT this volumes can be accessed only by this container
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg  # map haproxy.cfg to etc
    ports:  # Exposes container ports
      - "1344:1883"  # maps 1344 host port to 1883 container port
    networks:  # defines connected networks
      - iomt
      - monitoring

  prometheus:
    image: prom/prometheus:v2.1.0  # hub.docker.io - registry
                                   # prom - user/poject
                                   # prometheus - image
                                   # v2.1.0 - tag
    networks:
      - monitoring
    ports:
      - "9090:9090"
    command:  # command overrides the default command declared by the container image
      - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
      - prometheus:/data
    configs:
      - source: prom_config  # take config
        target: /etc/prometheus/prometheus.yml  # place it as target
      - source: alert_rules
        target: /etc/prometheus/alerts.yml
    deploy:  # deploy specifies the configuration for the deployment and lifecycle of services
      mode: replicated  # how to deploy: replicated - n containers on one node, global - 1 container per 1 node
      replicas: 1  # n containers to run
      resources:  # configures physical resource constraints for container to run on platform
        limits:  # The platform MUST prevent container to allocate more
          cpus: '0.25'
          memory: 512M
        reservations:  # The platform MUST guarantee container can allocate at least the configured amount
          cpus: '0.25'
          memory: 256M

  haproxy_exporter:
    image: prom/haproxy-exporter:v0.9.0
    networks:
      - monitoring
    command:
      - '--haproxy.scrape-uri=http://stats:stats@lb:1936/haproxy?stats;csv'
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  alertmanager:
    image: prom/alertmanager:v0.13.0
    networks:
      - monitoring
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    volumes:
      - alertmanager:/data
    configs:
      - source: alertmanager
        target: /etc/alertmanager/alertmanager.yml
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
      
  iomt_01:
    image: 127.0.0.1:5000/iomt_01
    build:
      context: .
    labels: [orbiter=true]
    environment:
      - JWT_KEY=MTIz
    deploy:
      mode: replicated
      replicas: 2
      labels: [orbiter=true]
      update_config:
        parallelism: 1
        delay: 3s
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 256M
    ports: 
      - "18830-18930:1883"
    networks:
      - iomt
      - monitoring
  
  web-site:
    image: 127.0.0.1:5000/web-site
    build:
      context: ./web
    ports:
      - "8080:80"
    networks:
      - iomt

  orbiter:
    image: gianarb/orbiter
    command: /bin/orbiter daemon --debug
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8005:8005
    deploy:
      placement:
        constraints:
          - node.role == manager
      mode: replicated
      replicas: 1
    networks:
      - monitoring

  clickhouse:
     image: yandex/clickhouse-server
     ports:
     - "8123:8123"
     - "9000:9000"
     - "9009:9009"
     networks:
        - iomt
     
     ulimits:
      nproc: 65535
      nofile:
       soft: 262144
       hard: 262144
      
     
  
 


      #driver: bridge
      #driver_opts:
      #com.docker.network.enable_ipv6: "false"
      #com.docker.network.driver.mtu: 1400
